import plotly.express as px
import pandas as pd
from .utils import format_currency


# üìà Gr√°fico de evolu√ß√£o semanal por t√©cnico
def plot_weekly_evolution(data):
    fig = px.line(
        data,
        x='Semana',
        y='Servi√ßo',
        color='Nome',
        markers=True,
        title='Evolu√ß√£o de Servi√ßos por T√©cnico',
        labels={'Servi√ßo': 'Valor em Servi√ßos ($)', 'Semana': 'Semana'}
    )
    fig.update_traces(hovertemplate="<b>%{x}</b><br>Valor: $%{y:,.2f}")
    return fig


# üí∞ Gr√°fico de pagamento semanal por t√©cnico
def plot_weekly_payments(data):
    fig = px.bar(
        data.sort_values('Pagamento Tecnico'),
        x='Pagamento Tecnico',
        y='Nome',
        color='Semana',
        barmode='group',
        title='Pagamento Semanal por T√©cnico',
        labels={'Pagamento Tecnico': 'Pagamento ($)', 'Nome': 'T√©cnico'}
    )
    fig.update_traces(
        texttemplate='$%{x:,.2f}',
        textposition='outside'
    )
    fig.update_layout(hovermode="x unified")
    return fig


# üë©‚Äçüîß Gr√°fico de atendimentos por t√©cnico
def plot_services_by_tech(data):
    fig = px.bar(
        data.sort_values('Atendimentos'),
        x='Atendimentos',
        y='Nome',
        title='Atendimentos por T√©cnico',
        color='Categoria',
        labels={'Atendimentos': 'Quantidade', 'Nome': 'T√©cnico'}
    )
    fig.update_traces(
        hovertemplate="<b>%{y}</b><br>Atendimentos: %{x}<br>Categoria: %{marker.color}"
    )
    return fig


# üíµ Gr√°fico de gorjetas por t√©cnico
def plot_tips_by_tech(data):
    fig = px.bar(
        data.sort_values('Gorjeta'),
        x='Gorjeta',
        y='Nome',
        title='Gorjetas por T√©cnico',
        color='Categoria',
        labels={'Gorjeta': 'Valor Gorjetas ($)', 'Nome': 'T√©cnico'}
    )
    fig.update_traces(
        hovertemplate="<b>%{y}</b><br>Total Gorjetas: $%{x:,.2f}<br>Categoria: %{marker.color}"
    )
    return fig


# üìÜ Gr√°fico de atendimentos por dia da semana
def plot_services_by_day(data):
    fig = px.bar(
        data,
        x='Dia',
        y='Atendimentos',
        title='Atendimentos por Dia da Semana',
        labels={'Atendimentos': 'Quantidade'}
    )
    fig.update_traces(
        hovertemplate="<b>%{x}</b><br>Atendimentos: %{y}"
    )
    return fig


# üí≥ Gr√°fico de valor total por m√©todo de pagamento
def plot_payment_methods_total(data):
    fig = px.bar(
        data.sort_values('Total'),
        x='Total',
        y='Pagamento',
        title='Valor Total por M√©todo de Pagamento (Servi√ßos + Gorjetas)',
        color='Servi√ßo',
        color_continuous_scale='Peach',
        labels={'Total': 'Valor Total ($)', 'Servi√ßo': 'Valor Servi√ßos ($)'}
    )
    fig.update_traces(
        hovertemplate="<b>%{y}</b><br>Total: $%{x:,.2f}<br>Servi√ßos: $%{marker.color:,.2f}"
    )
    return fig


# üìä Gr√°fico de quantidade de usos por m√©todo de pagamento
def plot_payment_methods_usage(data):
    if 'Percentual Uso' not in data.columns:
        data['Percentual Uso'] = (data['Qtd Usos'] / data['Qtd Usos'].sum() * 100).round(2)

    fig = px.bar(
        data.sort_values('Qtd Usos'),
        x='Qtd Usos',
        y='Pagamento',
        title='Quantidade de Usos por M√©todo de Pagamento',
        color='Qtd Usos',
        color_continuous_scale='Peach',
        labels={'Qtd Usos': 'Quantidade de Usos'},
        text='Percentual Uso'
    )
    fig.update_traces(
        texttemplate='%{text}%',
        textposition='outside',
        hovertemplate="<b>%{y}</b><br>Usos: %{x}<br>% do Total: %{text}%"
    )
    return fig
